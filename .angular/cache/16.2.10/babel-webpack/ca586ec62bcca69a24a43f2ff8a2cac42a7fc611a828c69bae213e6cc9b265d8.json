{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/movies-service\";\nexport class DashComponent {\n  constructor(fb, moviesService) {\n    this.fb = fb;\n    this.moviesService = moviesService;\n  }\n  ngOnInit() {\n    this.createForm();\n    this.moviesService.getMovies().subscribe(response => {\n      this.moviesList = response;\n      // Faça qualquer manipulação adicional aqui, se necessário\n    }, error => {\n      console.error('Erro ao obter o array de dados falsos:', error);\n    });\n  }\n  createForm() {\n    this.moviesListForm = this.fb.group({\n      nome: ['', Validators.required],\n      empresa: ['', [Validators.required]],\n      formato: ['', [Validators.required]],\n      tipo: [''],\n      status: ['', [Validators.required]],\n      tipoVeiculo: ['', [Validators.required]],\n      dataInicial: ['', [Validators.required]],\n      dataFinal: ['', [Validators.required]]\n    });\n  }\n  getMoviesData() {}\n  static #_ = this.ɵfac = function DashComponent_Factory(t) {\n    return new (t || DashComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MoviesService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashComponent,\n    selectors: [[\"app-dash\"]],\n    decls: 2,\n    vars: 0,\n    template: function DashComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"dash works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","DashComponent","constructor","fb","moviesService","ngOnInit","createForm","getMovies","subscribe","response","moviesList","error","console","moviesListForm","group","nome","required","empresa","formato","tipo","status","tipoVeiculo","dataInicial","dataFinal","getMoviesData","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","MoviesService","_2","selectors","decls","vars","template","DashComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\mathe\\Desktop\\Desenvolvimento\\quickSuite\\src\\app\\components\\dash\\dash.component.ts","C:\\Users\\mathe\\Desktop\\Desenvolvimento\\quickSuite\\src\\app\\components\\dash\\dash.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MoviesService } from 'src/app/services/movies-service';\n\n@Component({\n  selector: 'app-dash',\n  templateUrl: './dash.component.html',\n  styleUrls: ['./dash.component.less'],\n})\nexport class DashComponent implements OnInit {\n  moviesListForm!: FormGroup;\n  moviesList!: any[];\n\n  constructor(private fb: FormBuilder, private moviesService: MoviesService) {}\n\n  ngOnInit(): void {\n    this.createForm();\n\n    this.moviesService.getMovies().subscribe(\n      (response) => {\n        this.moviesList = response;\n        // Faça qualquer manipulação adicional aqui, se necessário\n      },\n      (error) => {\n        console.error('Erro ao obter o array de dados falsos:', error);\n      }\n    );\n  }\n\n  createForm(): void {\n    this.moviesListForm = this.fb.group({\n      nome: ['', Validators.required],\n      empresa: ['', [Validators.required]],\n      formato: ['', [Validators.required]],\n      tipo: [''],\n      status: ['', [Validators.required]],\n      tipoVeiculo: ['', [Validators.required]],\n      dataInicial: ['', [Validators.required]],\n      dataFinal: ['', [Validators.required]],\n    });\n  }\n\n  getMoviesData() {}\n}\n","<p>dash works!</p>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,EAAe,EAAUC,aAA4B;IAArD,KAAAD,EAAE,GAAFA,EAAE;IAAuB,KAAAC,aAAa,GAAbA,aAAa;EAAkB;EAE5EC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;IAEjB,IAAI,CAACF,aAAa,CAACG,SAAS,EAAE,CAACC,SAAS,CACrCC,QAAQ,IAAI;MACX,IAAI,CAACC,UAAU,GAAGD,QAAQ;MAC1B;IACF,CAAC,EACAE,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CACF;EACH;EAEAL,UAAUA,CAAA;IACR,IAAI,CAACO,cAAc,GAAG,IAAI,CAACV,EAAE,CAACW,KAAK,CAAC;MAClCC,IAAI,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MAC/BC,OAAO,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACpCE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACpCG,IAAI,EAAE,CAAC,EAAE,CAAC;MACVC,MAAM,EAAE,CAAC,EAAE,EAAE,CAACpB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACnCK,WAAW,EAAE,CAAC,EAAE,EAAE,CAACrB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACxCM,WAAW,EAAE,CAAC,EAAE,EAAE,CAACtB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACxCO,SAAS,EAAE,CAAC,EAAE,EAAE,CAACvB,UAAU,CAACgB,QAAQ,CAAC;KACtC,CAAC;EACJ;EAEAQ,aAAaA,CAAA,GAAI;EAAC,QAAAC,CAAA,G;qBAjCPxB,aAAa,EAAAyB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAb/B,aAAa;IAAAgC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT1BZ,EAAA,CAAAc,cAAA,QAAG;QAAAd,EAAA,CAAAe,MAAA,kBAAW;QAAAf,EAAA,CAAAgB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}